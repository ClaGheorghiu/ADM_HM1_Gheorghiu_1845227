{"username":"gheorghiu_184521","email":"gheorghiu.1845227@studenti.uniroma1.it","country":"Italy","company":"","name":"Claudiu Gabriel Gheorghiu","city":"Rome","website":"","job_title":"","personal_first_name":"Claudiu Gabriel","personal_last_name":"Gheorghiu","graduation_year":"2024","timezone":"Europe/Rome","is_professional":false,"hackos":635,"favorite_challenges":[],"challenges_created":[],"other_emails":[],"all_schools":[],"snippets":[],"submissions":[{"contest":"Master","challenge":"Say \"Hello, World!\" With Python","code":"print(\"Hello, World!\")\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Python If-Else","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input().strip())\nif n%2!=0:\n    print('Weird')\nelif n%2==0 and (1\u003cn and n\u003c6):\n    print('Not weird')\nelif n%2==0 and n in range(6,21):\n    print('Weird')\nelif n%2==0 and n\u003e20:\n    print('Not Weird')\n","score":0.833333333333,"language":"python3"},{"contest":"Master","challenge":"Python If-Else","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input().strip())\nif n%2!=0:\n    print('Weird')\nelif n%2==0 and n in range(2,6):\n    print('Not weird')\nelif n%2==0 and n in range(6,21):\n    print('Weird')\nelif n%2==0 and n\u003e20:\n    print('Not Weird')\n","score":0.833333333333,"language":"python3"},{"contest":"Master","challenge":"Python If-Else","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input().strip())\nif n%2!=0:\n    print('Weird')\nelif n%2==0 and n in range(2,6):\n    print('Not weird')\nelif n%2==0 and n in range(6,21):\n    print('Weird')\nelif n%2==0 and n\u003e20:\n    print('Not Weird')\n","score":0.833333333333,"language":"python3"},{"contest":"Master","challenge":"Python If-Else","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input().strip())\nif n%2!=0:\n    print('Weird')\nelif n%2==0 and n in range(2,6):\n    print('Not weird')\nelif n%2==0 and n in range(6,21):\n    print('Weird')\nelif n%2==0 and n\u003e20:\n    print('Not Weird')\n","score":0.833333333333,"language":"python3"},{"contest":"Master","challenge":"Python If-Else","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input().strip())\nif n%2!=0:\n    print('Weird')\nelif n%2==0 and n in range(2,6):\n    print('Not weird')\nelif n%2==0 and n in range(6,21):\n    print('Weird')\nelif n%2==0 and n\u003e20:\n    print('Not Weird')\n","score":0.833333333333,"language":"python3"},{"contest":"Master","challenge":"Python If-Else","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input().strip())\nif n%2!=0:\n    print('Weird')\nelif n%2==0 and n in range(2,6):\n    print('Not weird')\nelif n%2==0 and n in range(6,21):\n    print('Weird')\nelif n%2==0 and n\u003e20:\n    print('Not Weird')\n","score":0.833333333333,"language":"python3"},{"contest":"Master","challenge":"Python If-Else","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input().strip())\nif n%2!=0:\n    print('Weird')\nelif n%2==0 and n in range(2,6):\n    print('Not weird')\nelif n%2==0 and n in range(6,21):\n    print('Weird')\nelif n%2==0 and n\u003e20:\n    print('Not Weird')\n","score":0.833333333333,"language":"python3"},{"contest":"Master","challenge":"Python If-Else","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    n = int(input().strip())\nif n%2!=0:\n    print('Weird')\nelif n%2==0 and n in range(2,6):\n    print('Not Weird')\nelif n%2==0 and n in range(6,21):\n    print('Weird')\nelif n%2==0 and n\u003e20:\n    print('Not Weird')\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Arithmetic Operators","code":"if __name__ == '__main__':\n    a = int(input())\n    b = int(input())\nprint(a+b)\nprint(a-b)\nprint(a*b)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Python: Division","code":"if __name__ == '__main__':\n    a = int(input())\n    b = int(input())\nprint(a//b)\nprint(a/b)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Loops","code":"if __name__ == '__main__':\n    n = int(input())\ni=0\nfor i in range(0,n):\n    print(i**2)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if year%100==0:\n        leap= False\n    elif year%4==0 and year%100!=0:\n        leap= True\n    elif year%400:\n        leap=True\n    return leap\n\n","score":0.4,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if year%4==0:\n        leap=True\n    elif year%100!=0:\n        leap= False\n    elif year%100==0 and year%400==0:\n        leap=True\n    return leap\n\n","score":0.8,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if year%4==0:\n        leap=True\n    elif year%100!=0:\n        leap= False\n    elif year%100==0 and year%400!=0:\n        leap=True\n    return leap\n\n","score":0.8,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if year%4==0:\n        leap=True\n    elif year%100!=0:\n        leap= False\n    elif year%4==0 and year%100==0 and year%400==0:\n        leap=True\n    return leap\n\n","score":0.8,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if year%4==0:\n        leap=True\n    elif year%100!=0:\n        leap= False\n    elif year%4==0 and year%100!=0 and year%400==0:\n        leap=True\n    return leap\n\n","score":0.8,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if year%4==0:\n        leap=True\n    elif year%4==0 and year%100!=0:\n        leap= False\n    elif year%4==0 and year%100==0 and year%400==0:\n        leap=True\n    return leap\n\n","score":0.8,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if year%4==0:\n        return True\n    elif year%100!=0 and year%400==0:\n        return True\n    else:\n        return False\n    return leap\n\n","score":0.8,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if year%4==0 and year%100!=0:\n        return True\n    elif year%4==0 and year%100!=0 and year%400==0:\n        return True\n    return leap\n\n","score":0.6,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    leap = False\n    if year%4==0 and year%100!=0:\n        return True\n    elif year%4==0 and year%100==0 and year%400==0:\n        return True\n    return leap\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Print Function","code":"if __name__ == '__main__':\n    n = int(input())\nfor i in range (n):\n    print(i+1,end='')\n    \n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"List Comprehensions","code":"if __name__ == '__main__':\n    x = int(input())\n    y = int(input())\n    z = int(input())\n    n = int(input())\ncoordinates=[[i,j,k]\n         for i in range(x+1)\n         for j in range(y+1)\n         for k in range(z+1)\n         if (i+j+k)!= n]\nprint(coordinates)\n \n    \n    #list comprehension\n    #newList = [ expression(element) for element in oldList if condition ] \n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Find the Runner-Up Score!  ","code":"if __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    arr2=set(arr)\n    arr2.remove(max(arr2))\n    print(max(arr2))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Find the Runner-Up Score!  ","code":"if __name__ == '__main__':\n    n = int(input())\n    arr = map(int, input().split())\n    arr2=set(arr)\n    arr2.remove(max(arr2))\n    print(max(arr2))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Nested Lists","code":"if __name__ == '__main__':\n    for _ in range(int(input())):\n        name = input()\n        score = float(input())\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Nested Lists","code":"if __name__ == '__main__':\n    students = {}\n    mylist=list()   \n    for _ in range(int(input())):\n        name = input()\n        score = float(input())\n        mylist.append([name,score])\n    oldmin=min(x[1] for x in mylist) #trovo min score\n    mylist=[x for x in mylist if x[1]\u003eoldmin] # sovrascrivo lista ora senza vecchio minimo\n    newmin= min(x[1] for x in mylist) #trovo nuovo min score\n    soluzione=[x[0] for x in mylist if x[1]==newmin]\n    soluzione.sort()\n    for i in soluzione:\n        print(i)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Nested Lists","code":"if __name__ == '__main__':\n    students = {}\n    mylist=list()   #inizializzo la mia lista\n    for _ in range(int(input())):\n        name = input()\n        score = float(input())\n        mylist.append([name,score])\n    oldmin=min(x[1] for x in mylist) #trovo min score\n    mylist=[x for x in mylist if x[1]\u003eoldmin] # sovrascrivo lista ora senza vecchio minimo\n    newmin= min(x[1] for x in mylist) #trovo nuovo min score (2nd min)\n    soluzione=[x[0] for x in mylist if x[1]==newmin] #nomi\n    soluzione.sort() #ordino alfabeticamente\n    for i in soluzione:\n        print(i)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Finding the percentage","code":"if __name__ == '__main__':\n    n = int(input())\n    #dictionary initialized\n    student_marks = {}\n    for _ in range(n):\n        \n        #gets name and then the numbers in a dictionary\n        name, *line = input().split()\n        \n        #takes line input that is a list of strings \n        #then maps the strings to a float \n        #takes the float and return a map object [map(func,*iterables)]\n        # then cast map obj to list (\"scores\")\n        scores = list(map(float, line))\n        \n        #here we define the dictionary \n        #for a given name map to the list \n        #ex 'alpha':[20,30,40]\n        student_marks[name] = scores\n        \n        #loop ends when all n people iterated through\n    query_name = input()\n    \n    #how many marks for student (ie 3 as indicated in constraints)\n    marks_l=len(student_marks[query_name])\n    \n    #sum marks for student\n    marks_s=sum(student_marks[query_name])\n    \n    #avg aprx to 2nd decimal place\n    marks_avg=marks_s/marks_l\n    \n    print(\"{:.2f}\".format(marks_avg))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Lists","code":"if __name__ == '__main__':\n    N = int(input())\n    \n    lista=[]\n    \n    for _ in range(N):\n        cmd, *num=input().split(\" \")\n        if cmd==\"insert\":\n            i=int(num[0])\n            e=int(num[1])\n            lista.insert(i,e)\n        if cmd==\"print\":\n            print(lista)\n        if cmd==\"remove\":\n            lista.remove(int(num[0]))\n        if cmd==\"append\":\n            lista.append(int(num[0]))\n        if cmd==\"sort\":\n            lista.sort()\n        if cmd==\"pop\":\n            lista.pop()\n        if cmd==\"reverse\":\n            lista.reverse()\n            \n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Tuples ","code":"if __name__ == '__main__':\n    n = int(input())  #n el in the tuple \n    l=map(int,input().split()) #n space separated int \n    t=tuple(l)  #to tuple \n    print(hash(t))  #hash\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Tuples ","code":"if __name__ == '__main__':\n    n = int(input())  #n el in the tuple \n    l=map(int,input().split()) #n space separated int \n    t=tuple(l)  #to tuple \n    print(hash(t))  #hash\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"sWAP cASE","code":"def swap_case(s):\n    s1=''\n    for i in s:\n        if i.islower():\n            s1 = s1 + i.upper()\n        elif i.isupper():\n            s1= s1 + i.lower()\n        else:\n            s1=s1+i\n    return(s1)\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"sWAP cASE","code":"def swap_case(s):\n    s1=''\n    for i in s:\n        if i.islower():\n            s1 = s1 + i.upper()\n        elif i.isupper():\n            s1= s1 + i.lower()\n        else:\n            s1=s1+i\n    return(s1)\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"String Split and Join","code":"\n\ndef split_and_join(line):\n    return '-'.join(line.split(' '))\n\nif __name__ == '__main__':\n    line = input()\n    result = split_and_join(line)\n    print(result)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"What's Your Name?","code":"#\n# Complete the 'print_full_name' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. STRING first\n#  2. STRING last\n#\n\ndef print_full_name(first, last):\n    print(f\"Hello {first} {last}! You just delved into python.\")\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"What's Your Name?","code":"#\n# Complete the 'print_full_name' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. STRING first\n#  2. STRING last\n#\n\ndef print_full_name(first, last):\n    print(f\"Hello {first} {last}! You just delved into python.\")\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Mutations","code":"# slicing the string and joining it back\ndef mutate_string(string, position, character):\n    return string[:position] + character + string[position + 1:]\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Find a string","code":"def count_substring(string, sub_string):\n    count=0\n    index=string.find(sub_string)    \n    while(index!=-1):\n        count +=1\n        index=string.find(sub_string,index+1,len(string))\n    return  count\n    \n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"String Validators","code":"if __name__ == '__main__':\n    s = input()\n   \n    print(any(i.isalnum() for i in s))\n    print(any(i.isalpha() for i in s))\n    print(any(i.isdigit() for i in s))\n    print(any(i.islower() for i in s))\n    print(any(i.isupper() for i in  s))\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Text Alignment","code":"w=int(input()) #width -\u003e This must be an odd number\nh='H'\n\n#Top cone\nfor i in range(w):\n    print((h*i).rjust(w-1)+h+(h*i).ljust(w-1))\n#Top pillars\nfor i in range(w+1):\n    print((h*w).center(w*2)+(h*w).center(w*6))\n#Middle Belt\nfor i in range((w+1)//2):\n    print((h*w*5).center(w*6))\n#Bottom pillars\nfor i in range(w+1):\n    print((h*w).center(w*2)+(h*w).center(w*6))\n#Bottom cone \nfor i in range(w):\n    print(((h*(w-i-1)).rjust(w)+h+(h*(w-i-1)).ljust(w)).rjust(w*6))\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Text Wrap","code":"\n\ndef wrap(string, max_width):\n    s=textwrap.fill(string,max_width)\n    return s\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Designer Door Mat","code":"n,m=map(int,(input().split()))\n# 5\u003cn\u003c101 \u0026 m=3n\nc='.|.'\n#first half\nfor i in range(1,n,2):\n        print((c*i).center(m,'-'))\n#half\nprint('WELCOME'.center(m,'-'))\n#second half\nfor i in range(n-2,0,-2):\n    print((c*i).center(m,'-'))\n        \n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"String Formatting","code":"def print_formatted(num):\n    l=len(bin(num)[2:])  #space-padded to match the width of the binary value\n    for i in range(1,num+1):  #[,)\n        print(\n            str(i).rjust(l),                  #dec\n            str(oct(i)[2:]).rjust(l),         #oct\n            str(hex(i)[2:]).upper().rjust(l), #hex\n            str(bin(i)[2:]).rjust(l)          #bin\n            )\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Alphabet Rangoli","code":"import string\nalpha=string.ascii_lowercase\n\ndef print_rangoli(size):\n    for i in range(1,2*size):\n        k=alpha[abs(size-i):size] \n        k=k[-1:0:-1]+ k #before reverse alpha then alpha\n        print('-'.join(k).center(4*size-3,'-'))\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Alphabet Rangoli","code":"import string\nalpha=string.ascii_lowercase\n\ndef print_rangoli(size):\n    for i in range(1,2*size):\n        k=alpha[abs(size-i):size] \n        k=k[-1:0:-1]+ k #before reverse alpha then alpha\n        print('-'.join(k).center(4*size-3,'-'))\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Capitalize!","code":"\n\n# Complete the solve function below.\ndef solve(s):\n    name = []\n    full_name = s.split(\" \")\n    for i in range(0,len(full_name)):\n        name.append(full_name[i].capitalize())\n    return \" \".join(name)\n    \n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"The Minion Game","code":"def minion_game(string):\n    s =0              #s cons #k voc\n    k =0\n    vovl = [\"A\",\"E\",\"I\",\"O\",\"U\"]\n    for i in range(len(string)):\n        if string[i] in vovl:\n            k += len(string)-i\n        else:\n            s += len(string)-i\n    if s\u003ek:\n        print(\"Stuart {}\".format(s))\n    elif(s==k):\n        print(\"Draw\")\n    else:\n        print(\"Kevin {}\".format(k))\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Merge the Tools!","code":"def merge_the_tools(string, k):             #len(string) multiple of k\n    for i in range(0,len(string),k):\n        sub_string=[]\n        for x in range(i,i+k):\n            if string[x] not in sub_string:\n                sub_string.append(string[x])\n        sub_seq=''.join(sub_string)\n        print(sub_seq)\n        sub_string.clear()  #new sub_string for the next cicle\n            \n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Introduction to Sets","code":"def average(array):\n    return round(sum(set(array))/len(set(array)),3)\n\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Symmetric Difference","code":"M=int(input())\na=set(map(int,input().split()))\nN=int(input())\nb= set(map(int,input().split()))\n\nall_int=a.union(b)\ninter_int=a.intersection(b)\n\nsym_dif= (all_int-inter_int)\nsym_dif=list(sym_dif)\nsym_dif.sort()\nfor x in sym_dif:\n    print (x)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"No Idea!","code":"n, m = map(int, input().split())\narray= list(map(int, input().split()))\nhappyness = 0\n\nA, B =  set(map(int, input().split())),  set(map(int, input().split()))\n\nfor i in array:\n    # it works due to the average time complexity for set is O(1)\n    # whereas for lists and tuples it's always O(n)\n    if i in A:\n        happyness += 1\n    if i in B:\n        happyness -= 1\nprint(happyness)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Set .add() ","code":"N=int(input())\nnazioni=set()\nfor i in range(N):\n    nazioni.add(input())\nprint(len(nazioni))\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Set .discard(), .remove() \u0026 .pop()","code":"n=int(input())\ns=set(map(int,input().split()))\ncomandi=int(input())\nfor i in range(comandi):\n    inp=input().split()\n    if inp[0]=='remove':\n        s.remove(int(inp[1])\n    elif inp[0]=='discard':\n        s.discard(int(inp[1]))\n    else\n        s.pop()\nprint(sum(list(s)))\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"Set .discard(), .remove() \u0026 .pop()","code":"n=int(input())\ns=set(map(int,input().split()))\ncomandi=int(input())\nfor i in range(comandi):\n    inp=input().split()\n    if inp[0]=='remove':\n        s.remove(int(inp[1]))\n    elif inp[0]=='discard':\n        s.discard(int(inp[1]))\n    else\n        s.pop()\nprint(sum(list(s)))\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"Set .discard(), .remove() \u0026 .pop()","code":"n=int(input())\ns=set(map(int,input().split()))\ncomandi=int(input())\nfor i in range(comandi):\n    inp=input().split()\n    if inp[0]=='remove':\n        s.remove(int(inp[1]))\n    elif inp[0]=='discard':\n        s.discard(int(inp[1]))\n    else:\n        s.pop()\nprint(sum(list(s)))\n","score":0.0,"language":"pypy3"},{"contest":"Master","challenge":"Set .discard(), .remove() \u0026 .pop()","code":"n = int(input())\ns = set(input().split())\nn_cmnd = int(input())\nfor i in range (0, n_cmnd):\n    cmnd = input().split()\n    if cmnd[0] == 'remove':\n        s.remove(cmnd[1])\n    elif cmnd[0] == 'discard':\n        s.discard(cmnd[1])\n    elif cmnd[0] == 'pop':\n        s = set(sorted(s, reverse = True))\n        s.pop()\n        s = set(sorted(s, reverse = True))\nif  len(s) != 0:\n    print(sum(map(int, s)))\nelse:\n    print('0')\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Set .union() Operation","code":"n = int(input()) #number of students who have subscribed to the English newspaper\na = set(map(int,input().split())) # roll numbers of those students\nm = int(input()) # number of students who have subscribed to the French newspaper\nb = set(map(int,input().split())) #roll numbers of those students\nprint(len(a.union(b)))\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Set .intersection() Operation","code":"n = int(input()) #number of students who have subscribed to the English newspaper\na = set(map(int,input().split())) # roll numbers of those students\nm = int(input()) # number of students who have subscribed to the French newspaper\nb = set(map(int,input().split())) #roll numbers of those students\nprint(len(a.intersection(b)))\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Set .difference() Operation","code":"n = int(input()) #number of students who have subscribed to the English newspaper\na = set(map(int,input().split())) # roll numbers of those students\nm = int(input()) # number of students who have subscribed to the French newspaper\nb = set(map(int,input().split())) #roll numbers of those students\nprint(len(a.difference(b)))\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Set .symmetric_difference() Operation","code":"n = int(input()) #number of students who have subscribed to the English newspaper\na = set(map(int,input().split())) # roll numbers of those students\nm = int(input()) # number of students who have subscribed to the French newspaper\nb = set(map(int,input().split())) #roll numbers of those students\nprint(len(a.symmetric_difference(b)))\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Set Mutations","code":"n_el_A=int(input())\nA=set(map(int,input().split()))\nn_oth_sets=int(input())\nfor i in range (n_oth_sets):\n    cmnd=input().split()\n    if cmnd[0]=='intersection_update':\n        set_=set(map(int,input().split()))\n        A.intersection_update(set_)\n    elif cmnd[0]=='update':\n        set_=set(map(int,input().split()))\n        A.update(set_)\n    elif cmnd[0]=='symmetric_difference_update':\n        set_=set(map(int,input().split()))\n        A.symmetric_difference_update(set_)\n    elif cmnd[0]=='difference_update':\n        set_=set(map(int,input().split()))\n        A.difference_update(set_)\n    else:\n        assert False\n\nprint(sum(A))\n    \n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"The Captain's Room ","code":"\nk=int(input()) #size groups\nel_rnl_un=map(int,input().split()) #unordered elements of the room number list\nel_rnl=sorted(el_rnl_un) #ordered elements of the room number list\nfor i in range(len(el_rnl)):\n    if(i != len(el_rnl)-1):\n        if(el_rnl[i]!=el_rnl[i-1] and el_rnl[i]!=el_rnl[i+1]):\n            print(el_rnl[i])\n            break;\n    else:\n        print(el_rnl[i])\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Check Subset","code":"n=int(input()) #n test cases\n\nfor i in range(n):\n    n_A=int(input())\n    A=set(map(int,input().split()))\n    n_B=int(input())\n    B=set(map(int,input().split()))\n    print(A.issubset(B))\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Check Strict Superset","code":"A=set(input().split())\nn=int(input()) #n other sets\n\nr=True\nfor i in range(n):\n    B=set(input().split())\n    if B.issubset(A)==False:\n        r=False\n    if len(B) \u003e= len(A):\n        r=False\nprint(r)\n         \n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"collections.Counter()","code":"from collections import Counter as C\n\nsh_num=int(input())\nsh_sz=C(map(int,input().split()))\nn_cust=int(input())\n\nearn=0\nfor i in range(n_cust):\n    size,price= map(int,input().split())\n    if sh_sz[size]:\n        earn += price\n        sh_sz[size] -=1\nprint(earn)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Symmetric Difference","code":"M=int(input())\na=set(map(int,input().split()))\nN=int(input())\nb= set(map(int,input().split()))\n\nall_int=a.union(b)\ninter_int=a.intersection(b)\n\nsym_dif= (all_int-inter_int)\nsym_dif=list(sym_dif)\nsym_dif.sort()\nfor x in sym_dif:\n    print (x)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"DefaultDict Tutorial","code":"from collections import defaultdict\n\nn, m = map(int,input().split())\nd = defaultdict(lambda:[])\n\nfor i in range(n):\n    d[input()].append(str(i+1))\n\nfor i in range(m):\n    x = input()\n    if x in d:\n        print(\" \".join(d[x]))\n    else:\n        print(-1)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Collections.namedtuple()","code":"from collections import namedtuple\n\nN=int(input())\nS=namedtuple('Student',input().split())\nprint(sum([int(S(*input().split()).MARKS) for _ in range(N)])/N)\n    \n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Collections.OrderedDict()","code":"n = int(input(''))  # number of items\ndict_ = {}  #dictionary to store the item_name : total_price\nfor i in range(n):\n    list_ = list(map(str,input().split()))\n    #if len of list_ \u003e 2 then first 2 values will be item_name and price\n    if len(list_)\u003e2:\n        name = list_[0]+' '+list_[1]\n        price = int(list_[-1])\n    else:\n        name = list_[0]\n        price = int(list_[-1])\n       \n    if name in dict_:\n        dict_[name] +=int(price)\n    else:\n        dict_[name] = int(price)\n\nfor name, price in dict_.items():\n    print(name,price)\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Word Order","code":"n=int(input())\nxx={}\nword_l=[]\n\nfor i in range(n):\n    w=input()\n    word_l.append(w)\n    if w in xx:\n        xx[w] += 1\n    else:\n        xx[w]=1\n\nprint(len(xx))\nprint(' '.join([str(xx[w])for w in xx]))\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Collections.deque()","code":"from collections import deque\nn=int(input()) #n.operations\n\nd=deque()\nfor i in range(n):\n    cmnd=input().split()\n    if cmnd[0]=='append':\n        d.append(cmnd[1])\n    elif cmnd[0]=='pop':\n        d.pop()\n    elif cmnd[0]=='popleft':\n        d.popleft()\n    elif cmnd[0]=='popleft':\n        d.popleft()\n    elif cmnd[0]=='appendleft':\n        d.appendleft(cmnd[1])\nprint(' '.join(d))\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Piling Up!","code":"from collections import deque \n\nfor i in range(int(input())):\n    m=input()\n    blks= deque([int(s) for s in input().split()])\n    for b in sorted(blks, reverse=True):\n        if b==blks[0]:\n            blks.popleft()\n        elif b==blks[-1]:\n            blks.pop()\n        else:\n            print('No');\n            break\n    else:\n        print('Yes')\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Company Logo","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport collections\n\n\n\nif __name__ == '__main__':\n    s = sorted(input().strip())\n    s_co=collections.Counter(s).most_common()\n    s_co=sorted(s_co,key=lambda x: (x[1]*-1,x[0]))\n    for i in range(0,3):\n        print(s_co[i][0], s_co[i][1])\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Calendar Module","code":"import calendar as cal\n\nm,d,y=map(int,input().split())\nday=cal.weekday(year=y,month=m,day=d)\nprint(cal.day_name[day].upper())\n","score":1.0,"language":"pypy3"},{"contest":"Master","challenge":"Time Delta","code":"#!/bin/python3\nimport math\nimport os\nimport random\nimport re\nimport sys\nfrom datetime import datetime\n\ndef time_delta(d1,d2):\n    f= '%a %d %b %Y %H:%M:%S %z'\n    d1 = datetime.strptime(d1, f) \n    d2 = datetime.strptime(d2, f) \n    diff = (d2-d1).total_seconds()  \n    return abs(int(diff))\n\nfor i in range(int(input())):\n    print(time_delta(input(),input()))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Exceptions","code":"for i in range(int(input())):\n    try:\n        a,b=map(int,input().split())\n        print(a//b)\n    except Exception as e:\n        print('Error Code:',e)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Zipped!","code":"N,X=map(int,input().split()) #N=n stud, X=n marks\nL=[]\nfor i in range(X):\n    L +=[map(float,input().split())]\nfor i in zip(*L):\n    print(round(sum(i)/X,1))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Athlete Sort","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n\n\nif __name__ == '__main__':\n    \n    nm = input().split()\n    n = int(nm[0])\n    m = int(nm[1])\n    \n    arr = []\n\n    for _ in range(n):\n        arr.append(list(map(int, input().rstrip().split())))\n    k = int(input())\n\n    arr.sort(key=lambda x:x[k])\n    \n    for i in arr:\n        print(*i,sep=' ')\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Map and Lambda Function","code":"cube = lambda x: x**3 # complete the lambda function \n\ndef fibonacci(n):\n    # return a list of fibonacci numbers\n    n1,n2=0,1\n    a=[n1,n2]\n    if n\u003e1:\n        for i in range(2,n):\n            n3=n1+n2\n            n1=n2\n            n2=n3\n            a.append(n3)\n        return(a)\n    elif n==1:\n        return[n1]\n    else:\n        return[]        \n            \n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"XML 1 - Find the Score","code":"\n\ndef get_attr_number(node):\n    return len(node.attrib) + sum(get_attr_number(a) for a in node);\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"XML2 - Find the Maximum Depth","code":"\n\nmaxdepth = 0\ndef depth(elem, level):\n    global maxdepth\n    if (level==maxdepth):\n        maxdepth+=1\n    for i in elem:\n        depth(i,level+1)\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Standardize Mobile Number Using Decorators","code":"def wrapper(f):\n    def fun(l):\n        f(['+91 '+ i[-10:-5]+' '+ i[-5:] for i in l])\n    return fun\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Decorators 2 - Name Directory","code":"\n\ndef person_lister(f):\n    def inner(people):\n        return map(f, sorted(people, key=lambda x: int(x[2]))) \n    return inner\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Detect Floating Point Number","code":"\n#Number can start with +, - or . symbol.\n#Number must contain at least  decimal value\n#Number must have exactly one . symbol\n#Number must not give any exceptions when converted using float(N)\n\nimport re\nnum, pat=int(input()), r'^[+-]?\\d*[.]\\d*$'\n\n#r' ' raw string\n#^ start of the string\n#[]matches a single char from the inside, except a newline\n#? matches the preceding char zero or one times\n#\\d matches a single decimal digit char (0-9)\n#* matches the preceding char zero or more times \n#. matches a single char, except a newline. But when [.] a dot is matched\n#$ matches end of the string \n\n[print (bool(re.match(pat,input()))) for i in range(num)]\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Re.split()","code":"regex_pattern = r\"[.,]+\"\t\n\n#+ Matches the preceding character one or one times\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Group(), Groups() \u0026 Groupdict()","code":"# Print the first occurrence of the repeating character. If there are no repeating characters, print -1\n\nimport re\nm=re.search(r'([a-zA-Z0-9)])\\1+',input().strip())\nprint(m.group(1) if m else -1)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Re.findall() \u0026 Re.finditer()","code":"import re\nv=\"aeiou\"\nc=\"qwrtypsdfghjklzxcvbnm\"\nm= re.findall(r'(?\u003c=[%s])([%s]{2,})[%s]'%(c,v,c),input(),flags=re.I)\nprint('\\n'.join(m or ['-1']))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Re.start() \u0026 Re.end()","code":"import re\ns, k = input(), input()\nindexes = [(m.start(), m.end() + (len(k) -1)) for m in re.finditer(rf\"(?={k})\", s)]\n\nif len(indexes) \u003e 0:\n    for index_pair in indexes:\n        print(index_pair)\nelse:\n    print((-1, -1))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Regex Substitution","code":"import re\n\nfor _ in range(int(input())):\n    print(re.sub(r'(?\u003c= )(\u0026\u0026|\\|\\|)(?= )', lambda x: 'and'\n     if x.group() == '\u0026\u0026' else 'or', input()))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Validating Roman Numerals","code":"migl = 'M{0,3}'\ncent = '(C[MD]|D?C{0,3})'\ndec = '(X[CL]|L?X{0,3})'\ndigit = '(I[VX]|V?I{0,3})'\nregex_pattern = r\"%s%s%s%s$\" % (migl, cent, dec, digit)    \n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Arrays","code":"\n\n\ndef arrays(arr):\n    a =numpy.flip(numpy.array(arr,float))\n    return a\n    \n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Shape and Reshape","code":"import numpy\n\nprint (numpy.reshape(numpy.array(list(map(int,input().split()))),(3,3)))\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Transpose and Flatten","code":"import numpy \n\nrows,cols=list(map(int,input().split()))\nmatrix= numpy.array([list(map(int,input().split())) for i in range(rows)])\nprint (matrix.transpose())\nprint (matrix.flatten())\n    \n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Transpose and Flatten","code":"import numpy \n\nrows,cols=list(map(int,input().split()))\nmatrix= numpy.array([list(map(int,input().split())) for i in range(rows)])\nprint (matrix.transpose())\nprint (matrix.flatten())\n    \n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Concatenate","code":"import numpy\nn,m,p=map(int,input().split())\narr1=numpy.array([input().split() for i in range(n)],int)\narr2=numpy.array([input().split() for i in range(m)],int)\nprint(numpy.concatenate((arr1,arr2),axis=0))\n\n\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Zeros and Ones","code":"import numpy\nN=list(map(int,input().split()))\nprint(numpy.zeros(N,int))\nprint(numpy.ones(N,int))\n\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Eye and Identity","code":"import numpy\nnumpy.set_printoptions(legacy='1.13')\n\nn,m=list(map(int,input().split()))\nprint (numpy.eye(n,m))\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Array Mathematics","code":"import numpy\n\nn,m=list(map(int,input().split()))\na=numpy.array([input().split() for i in range(n)],int)\nb=numpy.array([input().split() for i in range(n)],int)\nprint (numpy.add(a,b))\nprint (numpy.subtract(a,b))\nprint (numpy.multiply(a,b))\nprint (a//b)\nprint (numpy.mod(a,b))\nprint (numpy.power(a,b))\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Floor, Ceil and Rint","code":"import numpy\nnumpy.set_printoptions(legacy='1.13')\na=numpy.array([input().split()],float)\nprint (numpy.floor(*a))\nprint (numpy.ceil(*a))\nprint (numpy.rint(*a))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Sum and Prod","code":"import numpy as np\n\nn,m=map(int,input().split())\nmatrix = np.array([list(map(int, input().split())) for i in range(n)])\n\nprint (np.prod(np.sum(matrix,axis=0)))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Min and Max","code":"import numpy\n\nn,m=map(int,input().split())\nmatrix=numpy.array([list(map(int,input().split())) for i in range(n)],int)\n\nprint (numpy.max((numpy.min(matrix,axis=1))))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Mean, Var, and Std","code":"import numpy\n\nn,m=map(int,input().split())\nmatrix=numpy.array([list(map(int,input().split())) for i in range(n)],float)\n\nprint (numpy.mean(matrix,axis=1))\nprint (numpy.var(matrix,axis=0))\nprint (round(numpy.std(matrix,axis=None),11))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Dot and Cross","code":"import numpy\n\nn=int(input())\na=numpy.array([input().split() for i in range(n)],int)\nb=numpy.array([input().split() for i in range(n)],int)\n\nprint (numpy.dot(a,b))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Inner and Outer","code":"import numpy as np\n\na=np.array([list(map(int,input().split()))])\nb=np.array([list(map(int,input().split()))])\n\nprint (int(np.inner(a,b)))\nprint (np.outer(a,b))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Polynomials","code":"import numpy\n\npol=[float(x) for x in input().split()]\nx=float(input())\nprint(numpy.polyval(pol,x))\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Linear Algebra","code":"import numpy\n\nn=int(input())\na=numpy.array([input().split() for i in range(n)],float)\nprint (numpy.linalg.det(a))\n\n","score":0.5,"language":"python3"},{"contest":"Master","challenge":"Linear Algebra","code":"import numpy\n\nn=int(input())\na=numpy.array([input().split() for i in range(n)],float)\nprint (round(numpy.linalg.det(a),2))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Validating phone numbers","code":"import re\n\npat= r\"^[789][0-9]{9}$\"\nfor i in range(int(input())):\n    if re.search(pat, input()):\n     print ('YES')\n    else:\n     print ('NO')\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Validating and Parsing Email Addresses","code":"import re\nfor i in range(int(input())):\n    x,y=input().split()\n    m=re.match(r'\u003c[A-Za-z](\\w|-|\\.|_)+@[A-Za-z]+\\.[A-Za-z]{1,3}\u003e',y)\n    if m:\n        print(x,y)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Hex Color Code","code":"import re\n\nA=int(input())\nret=False\nfor i in range(A):\n    s=input()\n    if '{' in s:\n        ret= True\n    elif '}' in s:\n        ret= False\n    elif ret:\n        for color in re.findall('#[0-9a-fA-F]{3,6}', s):\n            print (color)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Hex Color Code","code":"import re\n\nA=int(input())\nret=False\nfor i in range(A):\n    s=input()\n    if '{' in s:\n        ret= True\n    elif '}' in s:\n        ret= False\n    elif ret:\n        for color in re.findall('#[0-9a-fA-F]{3,6}', s):\n            print (color)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Birthday Cake Candles","code":"import math\nimport os\nimport random\nimport re\nimport sys\n\ndef birthdayCakeCandles(candles):\n    count=0\n    maxH=max(candles)\n    for i in candles:\n        if i==maxH:\n            count +=1\n    return count\n    \n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    candles_count = int(input().strip())\n\n    candles = list(map(int, input().rstrip().split()))\n\n    result = birthdayCakeCandles(candles)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Number Line Jumps","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'kangaroo' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. INTEGER x1\n#  2. INTEGER v1\n#  3. INTEGER x2\n#  4. INTEGER v2\n#\n\ndef kangaroo(x1, v1, x2, v2):\n     if (v1\u003ev2) and (x2-x1)%(v2-v1)==0: \n        return 'YES'\n     else:\n        return 'NO'\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    x1 = int(first_multiple_input[0])\n\n    v1 = int(first_multiple_input[1])\n\n    x2 = int(first_multiple_input[2])\n\n    v2 = int(first_multiple_input[3])\n\n    result = kangaroo(x1, v1, x2, v2)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Between Two Sets","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'getTotalX' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. INTEGER_ARRAY a\n#  2. INTEGER_ARRAY b\n#\n\ndef getTotalX(a, b):\n    # Write your code here\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    m = int(first_multiple_input[1])\n\n    arr = list(map(int, input().rstrip().split()))\n\n    brr = list(map(int, input().rstrip().split()))\n\n    total = getTotalX(arr, brr)\n\n    fptr.write(str(total) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Number Line Jumps","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'kangaroo' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. INTEGER x1\n#  2. INTEGER v1\n#  3. INTEGER x2\n#  4. INTEGER v2\n#\n\ndef kangaroo(x1, v1, x2, v2):\n    if (v1\u003ev2) and (x2-x1)%(v2-v1)==0:\n        return 'YES'\n    else:\n        return 'NO'\n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    x1 = int(first_multiple_input[0])\n\n    v1 = int(first_multiple_input[1])\n\n    x2 = int(first_multiple_input[2])\n\n    v2 = int(first_multiple_input[3])\n\n    result = kangaroo(x1, v1, x2, v2)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Number Line Jumps","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'kangaroo' function below.\n#\n# The function is expected to return a STRING.\n# The function accepts following parameters:\n#  1. INTEGER x1\n#  2. INTEGER v1\n#  3. INTEGER x2\n#  4. INTEGER v2\n#\n\ndef kangaroo(x1, v1, x2, v2):\n    if (v1\u003ev2) and (x2-x1)%(v2-v1)==0:\n        return ('YES')\n    else:\n        return \"NO\"\n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    x1 = int(first_multiple_input[0])\n\n    v1 = int(first_multiple_input[1])\n\n    x2 = int(first_multiple_input[2])\n\n    v2 = int(first_multiple_input[3])\n\n    result = kangaroo(x1, v1, x2, v2)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Viral Advertising","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'viralAdvertising' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts INTEGER n as parameter.\n#\n\ndef viralAdvertising(n):\n    liked=2\n    tot=5\n    cuml=2\n    for i in range(1,n):\n        tot=int(tot/2)*3\n        liked=int(tot/2)\n        cuml=cuml+liked\n    return cum\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    result = viralAdvertising(n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Viral Advertising","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'viralAdvertising' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts INTEGER n as parameter.\n#\n\ndef viralAdvertising(n):\n    liked=2\n    tot=5\n    cum=2\n    for i in range(1,n):\n        tot=int(tot/2)*3\n        liked=int(tot/2)\n        cum=cum+liked\n    return cum\n    \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip()) #days\n\n    result = viralAdvertising(n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Viral Advertising","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'viralAdvertising' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts INTEGER n as parameter.\n#\n\ndef viralAdvertising(n):\n    liked=2\n    tot=5\n    cum=2\n    for i in range(1,n):\n        tot=int(tot/2)*3\n        liked=int(tot/2)\n        cum=cum+liked\n    return cum\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input().strip())\n\n    result = viralAdvertising(n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Recursive Digit Sum","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'superDigit' function below.\n#\n# The function is expected to return an INTEGER.\n# The function accepts following parameters:\n#  1. STRING n\n#  2. INTEGER k\n#\n\ndef digsum(n):\n    return str(sum(int(i) for i in list(n)))\n\ndef sup_digit(n):\n    if len(n)\u003c=1:\n        return n\n    else:\n        return sup_digit(digsum(n))\n\ndef superDigit(n, k):\n    a=digsum(n)\n    return sup_digit(str(int(a)*k))\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = first_multiple_input[0]\n\n    k = int(first_multiple_input[1])\n\n    result = superDigit(n, k)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"}],"teams":[],"contest_participations":[{"jobs_consent":null,"contest":"Master"}],"forum_comments":[],"all_ratings":[],"contest_medals":[],"survey_results":[],"messages_sent":[],"run_codes":[],"contests_created":[],"job_applications":[],"skills_test":[]}